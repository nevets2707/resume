Project 2A

1) Steven Monson - srmonson

2) SimpleHero - First it sees if any of it's neighbors are edible and grabs one if it is. Then it tries to find an eatable that the hero can reach and that all other eatables can be reached from that spot. If none can be reached it chooses the first edible available. Then it uses a breadth first search to find a path to the edible.

SmartHero - Find the closest eatable that isn't closer to an enemy than the hero. If none can be found then simply the closest eatable that isn't on the same space as an enemy. Traverses the fastest way to that eatable that isn't through and enemy and not within one square of an enemy. If there is no path without going next to an enemy it will go next to an enemy but still not through it.

SmartEnemy -One of the enemies will find the closest eatable and stay on it to ensure at least a win. All other enemies will use the "lazypursuer" idea with a pursuit and a few random directions.

SmartPowerup - Find closest enemy. Stay on that enemy.

3) 

4) Pos.cpp - Used to hold and compare the vertices for finding a goal and traversing to it. It also holds an array of Pos pointers to keep track of the path to get to that vertice. 

simplehero.cpp - Has the method to select which neighbor to move to based on its the findGoal and BFSearch methods described above

SmartHero.cpp - Has the method to select which neighbor to move to based on its the findGoal and BFSearch methods described above

SmartEnemy.cpp - Has the method to select which neighbor to move to based on its the findGoal and BFSearch methods described above

SmartPowerup.cpp - Has the method to select which neighbor to move to based on its the findGoal and BFSearch methods described above
